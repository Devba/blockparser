/* vim: set tabstop=21 expandtab syntax=sql: */

BEGIN;
CREATE TABLE t_block (
  f_id               BIGINT UNIQUE PRIMARY KEY
 ,f_hash             TEXT UNIQUE NOT NULL
 ,f_version          BIGINT NOT NULL
 ,f_timestamp        TIMESTAMP WITHOUT TIME ZONE NOT NULL
 ,f_nonce            BIGINT NOT NULL
 ,f_difficulty       NUMERIC(20,4)
 ,f_merkle           TEXT NOT NULL
 ,f_numtransactions  BIGINT NOT NULL
 ,f_outputvalue      BIGINT NOT NULL
 ,f_feesvalue        BIGINT NOT NULL
 ,f_size             BIGINT NOT NULL
);
\copy t_block from 'blocks.csv' WITH (FORMAT CSV, HEADER);
COMMIT;
CREATE INDEX t_block_id_timestamp_idx ON t_block(f_id, f_timestamp);

BEGIN;
CREATE TABLE t_transaction (
  f_id               BIGINT UNIQUE PRIMARY KEY
 ,f_hash             TEXT UNIQUE NOT NULL
 ,f_version          BIGINT NOT NULL
 ,f_blockid          BIGINT NOT NULL
 ,f_numinputs        BIGINT NOT NULL
 ,f_numoutputs       BIGINT NOT NULL
 ,f_outputvalue      BIGINT NOT NULL
 ,f_feesvalue        BIGINT NOT NULL
 ,f_locktime         BIGINT NOT NULL
 ,f_size             BIGINT NOT NULL
);
\copy t_transaction from 'transactions.csv' WITH (FORMAT CSV, HEADER);
COMMIT;
ALTER TABLE t_transaction ADD FOREIGN KEY(f_blockid) REFERENCES t_block(f_id);

BEGIN;
CREATE TABLE t_output (
  f_transactionid    BIGINT NOT NULL
 ,f_index            INT NOT NULL
 ,f_value            BIGINT NOT NULL
 ,f_script           TEXT NOT NULL
 ,f_receivingaddress TEXT NOT NULL
 ,f_inputtxhash      TEXT
 ,f_inputtxindex     INT
);
\copy t_output from 'outputs.csv' WITH (FORMAT CSV, HEADER);
COMMIT;
ALTER TABLE t_output ADD FOREIGN KEY(f_transactionid) REFERENCES t_transaction(f_id);
ALTER TABLE t_output ADD FOREIGN KEY(f_inputtxhash) REFERENCES t_transaction(f_hash);

BEGIN;
CREATE TABLE t_input (
  f_transactionid    BIGINT NOT NULL
 ,f_index            INT NOT NULL
 ,f_script           TEXT NOT NULL
 ,f_outputtxhash     TEXT NOT NULL
 ,f_outputtxindex    INT NOT NULL
);
\copy t_input from 'inputs.csv' WITH (FORMAT CSV, HEADER);
COMMIT;
/* Every time we get a new input we link an existing output to it */
CREATE OR REPLACE FUNCTION link_txs() RETURNS TRIGGER AS $$
BEGIN
  UPDATE t_output
  SET f_inputtxhash = (SELECT f_hash FROM t_transaction WHERE f_id = NEW.f_transactionid)
     ,f_inputtxindex = NEW.f_index
  WHERE f_transactionid = (SELECT f_id FROM t_transaction WHERE f_hash = NEW.f_outputtxhash)
    AND f_index = NEW.f_outputtxindex;
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;
CREATE TRIGGER t_input_linkoutput BEFORE INSERT ON t_input
  FOR EACH ROW EXECUTE PROCEDURE link_txs();
ALTER TABLE t_input ADD FOREIGN KEY(f_transactionid) REFERENCES t_transaction(f_id);
ALTER TABLE t_input ADD FOREIGN KEY(f_outputtxhash) REFERENCES t_transaction(f_hash);
CREATE INDEX t_input_output_idx ON t_input(f_outputtxhash, f_outputtxindex);
CREATE INDEX t_input_transactionid_idx ON t_input(f_transactionid);

/* Update existing transactions */
UPDATE t_output
SET f_inputtxhash = data.f_inputtxhash,
    f_inputtxindex = data.f_inputtxindex
FROM (SELECT f_hash AS f_inputtxhash, f_index AS f_inputtxindex, f_outputtxhash, f_outputtxindex
      FROM t_input LEFT JOIN t_transaction
      ON t_input.f_transactionid = t_transaction.f_id) data
WHERE t_output.f_transactionid = (SELECT f_id FROM t_transaction WHERE f_hash = data.f_outputtxhash)
AND t_output.f_index = data.f_outputtxindex;

/* Add output indices */
CREATE INDEX t_output_input_null_idx ON t_output(f_inputtxhash) WHERE f_inputtxhash IS NULL;
CREATE INDEX t_output_input_notnull_idx ON t_output(f_inputtxhash) WHERE f_inputtxhash IS NOT NULL;
CREATE INDEX t_output_receivingaddress_idx ON t_output(f_receivingaddress);
CREATE INDEX t_output_linktx_idx ON t_output(f_transactionid, f_index);

/* Add summary tables */
CREATE TABLE t_daily (
  f_date             DATE UNIQUE PRIMARY KEY NOT NULL
 ,f_numblocks        BIGINT
 ,f_numtxs           BIGINT
 ,f_totalvalue       BIGINT
 ,f_totalfees        BIGINT
 ,f_avgtxsperblock   BIGINT
 ,f_avgfeesperblock  BIGINT
 ,f_avgblocksize     BIGINT
 ,f_numutxos         BIGINT
 ,f_utxonumdistrib   BIGINT[]
 ,f_utxovaluedistrib BIGINT[]
 ,f_blocksizedistrib BIGINT[]
 ,f_blocktimedistrib BIGINT[]
);

CREATE TABLE t_weekly (
  f_date             DATE UNIQUE PRIMARY KEY NOT NULL
 ,f_numblocks        BIGINT
 ,f_numtxs           BIGINT
 ,f_totalvalue       BIGINT
 ,f_totalfees        BIGINT
 ,f_avgtxsperblock   BIGINT
 ,f_avgfeesperblock  BIGINT
 ,f_avgblocksize     BIGINT
);

CREATE TABLE t_monthly (
  f_date             DATE UNIQUE PRIMARY KEY NOT NULL
 ,f_numblocks        BIGINT
 ,f_numtxs           BIGINT
 ,f_totalvalue       BIGINT
 ,f_totalfees        BIGINT
 ,f_avgtxsperblock   BIGINT
 ,f_avgfeesperblock  BIGINT
 ,f_avgblocksize     BIGINT
);

CREATE OR REPLACE FUNCTION daily_stats(DATE) RETURNS void AS $$
  BEGIN
    WITH t_blockstats AS (SELECT COUNT(1) AS f_numblocks
                                ,SUM(f_numtransactions) AS f_numtxs
                                ,SUM(f_outputvalue) AS f_totalvalue
                                ,SUM(f_feesvalue) AS f_totalfees
                                ,AVG(f_size)::BIGINT AS f_avgblocksize
                          FROM t_block
                          WHERE f_timestamp::DATE = $1),
         t_utxodistrib AS (SELECT * FROM utxo_distribution($1))
    INSERT INTO t_daily(f_date
                       ,f_numblocks
                       ,f_numtxs
                       ,f_totalvalue
                       ,f_totalfees
                       ,f_avgtxsperblock
                       ,f_avgfeesperblock
                       ,f_avgblocksize
                       ,f_numutxos
                       ,f_utxonumdistrib
                       ,f_utxovaluedistrib
                       ,f_blocksizedistrib
                       ,f_blocktimedistrib)
    SELECT $1
          ,f_numblocks
          ,f_numtxs
          ,f_totalvalue
          ,f_totalfees
          ,(f_numtxs/f_numblocks)::BIGINT
          ,(f_totalfees/f_numblocks)::BIGINT
          ,f_avgblocksize
          ,(SELECT utxo_count($1))
          ,t_utxodistrib.f_numa
          ,t_utxodistrib.f_valuea
          ,(SELECT blocksize_distribution($1, ($1 + interval '1 day')::date))
          ,(SELECT blocktime_distribution($1, ($1 + interval '1 day')::date))
    FROM t_blockstats, t_utxodistrib;
  END;
$$ LANGUAGE plpgsql;

/* Create stats for w/c the input date */
CREATE OR REPLACE FUNCTION weekly_stats(DATE) RETURNS void AS $$
  BEGIN
    WITH t_blockstats AS (SELECT COUNT(1) AS f_numblocks
                                ,SUM(f_numtransactions) AS f_numtxs
                                ,SUM(f_outputvalue) AS f_totalvalue
                                ,SUM(f_feesvalue) AS f_totalfees
                                ,AVG(f_size)::BIGINT AS f_avgblocksize
                          FROM t_block
                          WHERE f_timestamp::DATE >= $1 AND f_timestamp::DATE < ($1 + '1 week'::interval)::date),
    INSERT INTO t_weekly(f_date
                        ,f_numblocks
                        ,f_numtxs
                        ,f_totalvalue
                        ,f_totalfees
                        ,f_avgtxsperblock
                        ,f_avgfeesperblock
                        ,f_avgblocksize)
    SELECT $1
          ,f_numblocks
          ,f_numtxs
          ,f_totalvalue
          ,f_totalfees
          ,(f_numtxs/f_numblocks)::BIGINT
          ,(f_totalfees/f_numblocks)::BIGINT
          ,f_avgblocksize
    FROM t_blockstats;
  END;
$$ LANGUAGE plpgsql;

/* Create stats for m/c the input date */
CREATE OR REPLACE FUNCTION monthly_stats(DATE) RETURNS void AS $$
  BEGIN
    WITH t_blockstats AS (SELECT COUNT(1) AS f_numblocks
                                ,SUM(f_numtransactions) AS f_numtxs
                                ,SUM(f_outputvalue) AS f_totalvalue
                                ,SUM(f_feesvalue) AS f_totalfees
                                ,AVG(f_size)::BIGINT AS f_avgblocksize
                          FROM t_block
                          WHERE f_timestamp::DATE >= $1 AND f_timestamp::DATE < ($1 + '1 month'::interval)::date)
    INSERT INTO t_monthly(f_date
                         ,f_numblocks
                         ,f_numtxs
                         ,f_totalvalue
                         ,f_totalfees
                         ,f_avgtxsperblock
                         ,f_avgfeesperblock
                         ,f_avgblocksize)
    SELECT $1
          ,f_numblocks
          ,f_numtxs
          ,f_totalvalue
          ,f_totalfees
          ,(f_numtxs/f_numblocks)::BIGINT
          ,(f_totalfees/f_numblocks)::BIGINT
          ,f_avgblocksize
    FROM t_blockstats;
  END;
$$ LANGUAGE plpgsql;

/* Distribution of UTXOs.  If only BTC were divisible by 1,000,000,000... */
CREATE OR REPLACE FUNCTION utxo_distribution(DATE) RETURNS TABLE(f_numa BIGINT[], f_valuea BIGINT[]) AS $$
  BEGIN
    RETURN QUERY WITH t_utxo AS (SELECT * FROM t_output WHERE f_inputtxhash IS NULL)
    SELECT array_agg(f_num) AS f_numa, array_agg(f_value) AS f_valuea
    FROM (SELECT f_num, f_value::BIGINT FROM (SELECT 'satoshi' AS f_range
                                            ,1 AS f_rangenum
                                            ,COUNT(1) AS f_num
                                            ,COALESCE(SUM(f_value), 0) AS f_value
                                      FROM t_utxo
                                      WHERE f_value >= 0 AND f_value < 100
                                      UNION
                                      SELECT 'uBTC' AS f_range
                                            ,2 AS f_rangenum
                                            ,COUNT(1) AS f_num
                                            ,COALESCE(SUM(f_value), 0) AS f_value
                                      FROM t_utxo
                                      WHERE f_value >= 100 AND f_value < 100000
                                      UNION
                                      SELECT 'mBTC' AS f_range
                                            ,3 AS f_rangenum
                                            ,COUNT(1) AS f_num
                                            ,COALESCE(SUM(f_value), 0) AS f_value
                                      FROM t_utxo
                                      WHERE f_value >= 100000 AND f_value < 100000000
                                      UNION
                                      SELECT 'BTC' AS f_range
                                            ,4 AS f_rangenum
                                            ,COUNT(1) AS f_num
                                            ,COALESCE(SUM(f_value), 0) AS f_value
                                      FROM t_utxo
                                      WHERE f_value >= 100000000 AND f_value < 100000000000
                                      UNION
                                      SELECT 'kBTC' AS f_range
                                            ,5 AS f_rangenum
                                            ,COUNT(1) AS f_num
                                            ,COALESCE(SUM(f_value), 0) AS f_value
                                      FROM t_utxo
                                      WHERE f_value >= 100000000000 AND f_value < 100000000000000
                                      UNION
                                      SELECT 'MBTC' AS f_range
                                            ,6 AS f_rangenum
                                            ,COUNT(1) AS f_num
                                            ,COALESCE(SUM(f_value), 0) AS f_value
                                      FROM t_utxo
                                      WHERE f_value >= 100000000000000) f_data
          ORDER BY f_rangenum) f_outer;
  END;
$$ LANGUAGE plpgsql;

/* Distribution of transaction outputs for a given date range */
CREATE OR REPLACE FUNCTION txo_distribution(DATE, DATE) RETURNS TABLE(f_numa BIGINT[], f_valuea BIGINT[]) AS $$
  BEGIN
    RETURN QUERY WITH t_txo AS (SELECT * FROM t_output WHERE f_transactionid IN (SELECT f_id FROM t_transaction WHERE f_blockid IN (SELECT f_id FROM t_block WHERE f_timestamp > $1 AND f_timestamp < $2)))
    SELECT array_agg(f_num) AS f_numa, array_agg(f_value) AS f_valuea
    FROM (SELECT f_num, f_value::BIGINT FROM (SELECT 'satoshi' AS f_range
                                            ,1 AS f_rangenum
                                            ,COUNT(1) AS f_num
                                            ,COALESCE(SUM(f_value), 0) AS f_value
                                      FROM t_txo
                                      WHERE f_value >= 0 AND f_value < 100
                                      UNION
                                      SELECT 'uBTC' AS f_range
                                            ,2 AS f_rangenum
                                            ,COUNT(1) AS f_num
                                            ,COALESCE(SUM(f_value), 0) AS f_value
                                      FROM t_txo
                                      WHERE f_value >= 100 AND f_value < 100000
                                      UNION
                                      SELECT 'mBTC' AS f_range
                                            ,3 AS f_rangenum
                                            ,COUNT(1) AS f_num
                                            ,COALESCE(SUM(f_value), 0) AS f_value
                                      FROM t_txo
                                      WHERE f_value >= 100000 AND f_value < 100000000
                                      UNION
                                      SELECT 'BTC' AS f_range
                                            ,4 AS f_rangenum
                                            ,COUNT(1) AS f_num
                                            ,COALESCE(SUM(f_value), 0) AS f_value
                                      FROM t_txo
                                      WHERE f_value >= 100000000 AND f_value < 100000000000
                                      UNION
                                      SELECT 'kBTC' AS f_range
                                            ,5 AS f_rangenum
                                            ,COUNT(1) AS f_num
                                            ,COALESCE(SUM(f_value), 0) AS f_value
                                      FROM t_txo
                                      WHERE f_value >= 100000000000 AND f_value < 100000000000000
                                      UNION
                                      SELECT 'MBTC' AS f_range
                                            ,6 AS f_rangenum
                                            ,COUNT(1) AS f_num
                                            ,COALESCE(SUM(f_value), 0) AS f_value
                                      FROM t_txo
                                      WHERE f_value >= 100000000000000) f_data
          ORDER BY f_rangenum) f_outer;
  END;
$$ LANGUAGE plpgsql;

/* Unspent transactino outputs at a given time */
CREATE OR REPLACE FUNCTION utxo_count(DATE) RETURNS BIGINT AS $$
  WITH t_transactionstats AS (SELECT COUNT(*) AS f_numutxos
                              FROM t_output
                              WHERE f_inputtxhash IS NULL),
       t_minblock AS (SELECT min(f_id) AS f_id
                      FROM t_block
                     WHERE f_timestamp > $1::timestamp),
       t_mintransaction AS (SELECT min(t_transaction.f_id) AS f_id
                            FROM t_transaction, t_minblock
                            WHERE f_blockid = t_minblock.f_id),
       t_numutxos AS (SELECT COUNT(1) AS f_num
                      FROM t_output
                      WHERE f_inputtxhash IS NULL),
       t_numstxos AS (SELECT COUNT(1) AS f_num
                      FROM t_output, t_mintransaction
                      WHERE f_inputtxhash IS NOT NULL
                      AND f_transactionid > t_mintransaction.f_id),
       t_numtxis AS (SELECT COUNT(1) AS f_num
                     FROM t_input, t_mintransaction
                     WHERE f_transactionid > t_mintransaction.f_id)
  SELECT t_numutxos.f_num + t_numstxos.f_num - t_numtxis.f_num AS f_numutxos
  FROM t_numutxos, t_numstxos, t_numtxis;
$$ LANGUAGE sql;

/* Size of blocks for a given time period */
CREATE OR REPLACE FUNCTION blocksize_distribution(DATE, DATE) RETURNS TABLE(f_numa bigint[]) AS $$
  BEGIN
    RETURN QUERY
      SELECT array_agg(COALESCE(t_blockdistrib.f_num, 0)) AS f_numa FROM generate_series(0,9) AS f_ref
      LEFT JOIN (SELECT COUNT(1) AS f_num, f_size / 102400 AS f_range
                 FROM t_block
                 WHERE f_timestamp >= $1
                   AND f_timestamp < $2
                 GROUP BY f_size / 102400
                 ORDER BY f_size / 102400) t_blockdistrib
      ON f_ref = t_blockdistrib.f_range;
  END;
$$ LANGUAGE plpgsql;

/* Time between successive blocks for a given time period */
CREATE OR REPLACE FUNCTION blocktime_distribution(DATE, DATE) RETURNS TABLE(f_numa bigint[]) AS $$
  BEGIN
    RETURN QUERY
      SELECT array_agg(COALESCE(t_blockdistrib.f_num, 0)) AS f_numa
      FROM generate_series(0, 14) AS f_ref
      LEFT JOIN (WITH t_range AS (SELECT (EXTRACT(EPOCH FROM (f_timestamp - LAG(f_timestamp) OVER (ORDER BY f_timestamp))) / 240)::int AS f_range
                                  FROM t_block
                                  WHERE f_timestamp >= $1
                                    AND f_timestamp < $2)
                 SELECT COUNT(1) AS f_num,
                        CASE WHEN f_range <= 15 THEN f_range ELSE 15 END as f_range
                 FROM t_range
                 GROUP BY f_range
                 ORDER BY f_range) t_blockdistrib
      ON f_ref = t_blockdistrib.f_range;
  END;
$$ LANGUAGE plpgsql;
